[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      <li>Red</li>\n      <li>Blue</li>\n      <li>Green</li>\n    </ul>\n  );\n}\nrender(<ColorList />);","type":"code","id":"vqne6"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('textbox')).toThrow(); // should throw error\n\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('textbox'); // by default wait 1 second\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"i88gv"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(screen.getByRole('list')).toBeInTheDocument();\n  expect(screen.queryByRole('list')).toBeInTheDocument();\n  expect(await screen.findByRole('list')).toBeInTheDocument();\n});","type":"code","id":"2mqv1"},{"content":"test('getBy, queryBy, findBy when finding > 1 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('listitem')).toThrow(); // should throw error\n\n  expect(() => screen.queryByRole('listitem')).toThrow(); // more than 1\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('listitem'); // by default wait 1 second\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"frocg"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\n  render(<ColorList />);\n\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\n});","type":"code","id":"3159u"},{"content":"test('favor using getBy to prove an element exists', () => {\n  render(<ColorList />);\n\n  const element = screen.getByRole('list');\n  expect(element).toBeInTheDocument();\n});","type":"code","id":"lkf54"},{"content":"test('favor queryBy when proving an element does not exist', () => {\n  render(<ColorList />);\n\n  const element = screen.queryByRole('textbox');\n  expect(element).not.toBeInTheDocument();\n});","type":"code","id":"7k5lp"},{"content":"import { useState, useEffect } from 'react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'green', 'blue']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors().then((c) => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LoadableColorList />);","type":"code","id":"ofds7"},{"content":"test('Favor findBy or findAllBy when data fetching', async () => {\n  render(<LoadableColorList />);\n\n  const els = await screen.findAllByRole('listitem');\n  expect(els).toHaveLength(3);\n});","type":"code","id":"yjegl"}]